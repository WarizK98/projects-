package ada;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

class print {

// Iterative function to generate all permutations of a String in Java
// using Collections
public static void permutations(String s)
{
// create an empty ArrayList to store (partial) permutations
List<String> partial = new ArrayList<>();

// initialize the list with the first character of the string
partial.add(String.valueOf(s.charAt(0)));

// do for every character of the specified string
for (int i = 1; i < s.length(); i++)
{
// consider previously constructed partial permutation one by one

// (iterate backwards to avoid ConcurrentModificationException)
for (int j = partial.size() - 1; j >= 0 ; j--)
{
// remove current partial permutation from the ArrayList
String str = partial.remove(j);

// Insert next character of the specified string in all
// possible positions of current partial permutation. Then
// insert each of these newly constructed string in the list

for (int k = 0; k <= str.length(); k++)
{
// Advice: use StringBuilder for concatenation
partial.add(str.substring(0, k) + s.charAt(i) +
str.substring(k));
}
}
}
System.out.println(partial);
String[] arr=new String[partial.size()];
 arr=partial.toArray(arr);
Scanner S=new Scanner(System.in);
System.out.println("Enter the password:");
    String str1=S.nextLine();
int len=arr.length;
 
   for( int i=0;i<len;i++)
   {
        if  (str1.equals(arr[i])) {
         System.out.println("password correct");
         System.exit(0);
        }
}
         System.out.println("password incorrect");
    }
// Iterative program to generate all permutations of a String in Java
public static void main(String[] args)
{
Scanner S=new Scanner(System.in);
        System.out.println("Enter the string with one special character and atleast 1 number:");
        String str=S.nextLine();
          int n=str.length();
        if(n==5) 
        {
 permutations(str);
        }
        else
        {
          System.out.println("wrong length");
        }
 }
}

