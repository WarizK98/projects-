#include <stdio.h>
#include <conio.h>
#define SIZE 4
#define R 4 
#define C 4


//the maze problem
int maze[SIZE][SIZE] = {
                       {0,  0, 0, 0}, 
                       {0, -1, 0, 0}, 
                       {-1, 0, 0, 0}, 
                       {0,  0, 0, 0}}; 


// Returns count of possible paths in a maze[R][C] 
// from (0,0) to (R-1,C-1) 
intcountPaths(int maze[R][C]) 
{ 
intI,j;
    // If the initial cell is blocked, there is no 
    // way of moving anywhere 
    if (maze[0][0]==-1) 
        return 0; 

    // Initializing the leftmost column 
    for (i=0; i<R; i++) 
    { 
        if (maze[i][0] == 0) 
            maze[i][0] = 1; 

        // If we encounter a blocked cell in leftmost 
        // row, there is no way of visiting any cell 
        // directly below it. 
        else
            break; 
    } 

    // Similarly initialize the topmost row 
    for (i=1; i<C; i++) 
    { 
        if (maze[0][i] == 0) 
            maze[0][i] = 1; 

        // If we encounter a blocked cell in bottommost 
        // row, there is no way of visiting any cell 
        // directly below it. 
        else
            break; 
    } 

    // The only difference is that if a cell is -1, 
    // simply ignore it else recursively compute 
    // count value maze[i][j] 
    for (i=1; i<R; i++) 
    { 
        for (j=1; j<C; j++) 
        { 
            // If blockage is found, ignore this cell  
            if (maze[i][j] == -1) 
                continue; 

            // If we can reach maze[i][j] from maze[i-1][j] 
            // then increment count. 
            if (maze[i-1][j] > 0) 
                maze[i][j] = (maze[i][j] + maze[i-1][j]); 

            // If we can reach maze[i][j] from maze[i][j-1] 
            // then increment count. 
            if (maze[i][j-1] > 0) 
                maze[i][j] = (maze[i][j] + maze[i][j-1]); 
        } 
    } 

    // If the final cell is blocked, output 0, otherwise 
    // the answer 
    return (maze[R-1][C-1] > 0)? maze[R-1][C-1] : 0; 
} 
//matrix to store the solution
int solution[SIZE][SIZE];

//function to print the solution matrix
void printsolution()
{
inti,j;
    for(i=0;i<SIZE;i++)
    {
        for(j=0;j<SIZE;j++)
        {
printf("%d\t",solution[i][j]);
        }
printf("\n\n");
    }
getch();
}

//function to solve the maze
//using backtracking
intsolvemaze(int r, int c)
{
    //if destination is reached, maze is solved
    //destination is the last cell(maze[SIZE-1][SIZE-1])
    if((r==SIZE-1) && (c==SIZE-1))
    {
        solution[r][c] = 1;
        return 1;
    }
    //checking if we can visit in this cell or not
    //the indices of the cell must be in (0,SIZE-1)
    //and solution[r][c] == 0 is making sure that the cell is not already visited
    //maze[r][c] == 0 is making sure that the cell is not blocked
    if(r>=0 && c>=0 && r<SIZE && c<SIZE && solution[r][c] == 0 && maze[r][c] == 0)
    {
        //if safe to visit then visit the cell
        solution[r][c] = 1;
        //going down
if(solvemaze(r+1, c))
            return 1;
        //going right
if(solvemaze(r, c+1))
            return 1;
        //going up
if(solvemaze(r-1, c))
            return 1;
        //going left
if(solvemaze(r, c-1))
            return 1;
        //backtracking
        solution[r][c] = 0;
        return 0;
    }
    return 0;

}

intmain()
{
    //making all elements of the solution matrix 0
inti,j,a;
for(i=0; i<SIZE; i++)
    {
for(j=0; j<SIZE; j++)
        {
            solution[i][j] = 0;
        }
    }
    if (solvemaze(0,0))
printsolution();
    else
printf("No solution\n");
a= countPaths(maze); 
printf("THE NUMBER OF PATHS ARE : %d\n",a);
getch();
    return 0;
}


